<Card style="width:500px;">
	<CardBody>
		<Row>
			<Column ColumnSize="ColumnSize.Is4">
				<h3>Banko</h3>
			</Column>
			<Column ColumnSize="ColumnSize.Is8">
				<Addons>
					<Addon AddonType="AddonType.Start">
						<TextEdit @bind-Text=InputText Placeholder="Input number.." style="width:200px;" />
					</Addon>
					<Addon AddonType="AddonType.End">
						<Button Color="Color.Primary" @onclick=@(async () => await MarkNumberByInput())>Input</Button>
					</Addon>
				</Addons>
			</Column>
		</Row>
	</CardBody>
</Card>

<Div Flex="Flex.JustifyContent.Between" Style="flex-wrap:wrap;">
	@for (int i = 0; i < Plates.Count; i++)
	{
		BankoPlate plate = Plates[i];
		<Card>
			<CardBody>
				<h4>Plate: @plate.Id</h4>
				<Table Bordered>
					<TableBody>
						@for (int k = 0; k < 3; k++)
						{
							//We must do this, otherwise k becomes 3 (somehow), but if we assign it locally in scope it does not happen.
							//Refere to this git issue for.. an explanation: https://github.com/dotnet/aspnetcore/issues/22302
							int rowIndex = k;
							<TableRow>
								@for (int j = 0; j < plate.Rows[rowIndex].Values.Length; j++)
								{
									int valueIndex = j;
									Background background = Background.White;
									RowValue rowValue = plate.Rows[rowIndex].Values[valueIndex];
									string input = "";
									if (rowValue.Number != null)
									{
										input = rowValue.Number.ToString();
										if (rowValue.Marked)
										{
											background = Background.Success;
										}
									}
									<TableRowCell Background=background @onclick=@(async () => await MarkNumber(plate.Id, rowValue))>@input</TableRowCell>
								}
							</TableRow>
						}
					</TableBody>
				</Table>
			</CardBody>
		</Card>
	}
</Div>
<Modal @ref="modalRef">
	<ModalContent Centered>
		<ModalHeader>
			<ModalTitle>Plate: @ViewablePlate.Id</ModalTitle>
		</ModalHeader>
		<ModalBody>
			<center>
				<h2>@ViewablePlateText</h2>
			</center>
		</ModalBody>
		<ModalFooter>
			<Button Color="Color.Secondary" @onclick=@(async () => await (modalRef.Hide()))>Close</Button>
		</ModalFooter>
	</ModalContent>
</Modal>

@code {
	Modal modalRef;
	List<BankoPlate> Plates { get; set; }
	BankoPlate ViewablePlate { get; set; }
	string ViewablePlateText { get; set; }
	string InputText { get; set; }

	bool OneRowWon = false;
	bool TwoRowsWon = false;
	/// <summary>
	/// The very first function that is run upon loading a component, basically Page_Load from Webforms.
	/// </summary>
	/// <returns></returns>
	protected override async Task OnInitializedAsync()
	{
		Plates = new List<BankoPlate>();
		ViewablePlate = new BankoPlate();
		Plates = PlateGenerator.ImportByCSV();
		Console.WriteLine();
	}

	/// <summary>
	///
	/// </summary>
	/// <param name="plateId"></param>
	/// <param name="rowValue"></param>
	/// <returns></returns>
	private async Task MarkNumber(string plateId, RowValue rowValue)
	{
		if (rowValue.Number == null)
		{
			return;
		}
		rowValue.Marked = !rowValue.Marked;
		await CheckPlate(plateId);
	}


	/// <summary>
	/// Checks each Row on a Plate to see if it is won, and marks it accordingly.
	/// </summary>
	/// <param name="id">Plate ID</param>
	/// <returns></returns>
	private async Task CheckPlate(string id)
	{
		BankoPlate plate = Plates.Find(x => x.Id == id);
		foreach (global::Banko.Shared.Models.Row row in plate.Rows)
		{
			if (row.Values.Count(x => x.Marked == true) == 5)
			{
				row.Won = true;
			}
			else
			{
				row.Won = false;
			}
		}
		int rowsWon = plate.Rows.Count(x => x.Won == true);
		switch (rowsWon)
		{
			case 1:
				if (!OneRowWon)
				{
					ViewablePlateText = "You have won one row on this plate!";
					ViewablePlate = plate;
					OneRowWon = true;
					await modalRef.Show();
				}
				break;
			case 2:
				if (!TwoRowsWon)
				{
					ViewablePlateText = "You have won two rows on this plate!";
					ViewablePlate = plate;
					TwoRowsWon = true;
					await modalRef.Show();
				}
				break;
			case 3:
				ViewablePlateText = "You have won this plate!";
				ViewablePlate = plate;
				TwoRowsWon = true;
				await modalRef.Show();
				break;
		}
	}

	private async Task MarkNumberByInput()
	{
		bool validInput = int.TryParse(InputText, out int result);
		if (validInput)
		{
			foreach (BankoPlate plate in Plates)
			{
				foreach (global::Banko.Shared.Models.Row row in plate.Rows)
				{
					RowValue rowValue = row.Values.FirstOrDefault(x => x.Number == result);
					if (rowValue != null)
					{
						rowValue.Marked = true;
					}
				}
				await CheckPlate(plate.Id);
			}
		}
		InputText = "";
	}
}